<template name="init" xmlns="http://ws.apache.org/ns/synapse">
	<parameter name="accessKeyId" description="AWS access key ID" />
	<parameter name="secretAccessKey" description="AWS secret access key" />
	<parameter name="methodType" description="HTTP method type" />
	<parameter name="contentLength" description="Length of the message" />
	<parameter name="contentType" description="Content type of the resource" />
	<parameter name="contentMD5" description="Base64 encoded 128-bit MD5 digest" />
	<parameter name="expect" description="Application uses 100-continue" />
	<parameter name="host" description="For path-style requests" />
	<parameter name="xAmzDate" description="Current date and time" />
	<parameter name="xAmzSecurityToken" description="The security token" />
	<parameter name="bucketName" description="Name of the buckut" />
	<parameter name="uriRemainder" description="Remains part of the uri" />

	<parameter name="xAmzAcl" description="Name of the xAmzAcl" />
	<parameter name="xAmzGrantRead" description="Name of the xAmzFrantRead" />
	<parameter name="xAmzGrantWrite" description="Name of the xAmzGrantWrite" />
	<parameter name="xAmzGrantReadAcp" description="Name of the xAmzGrantReadAcp" />
	<parameter name="xAmzGrantWriteAcp" description="Name of the xAmzGrantWriteAcp" />
	<parameter name="xAmzGrantFullControl" description="Name of the xAmzGrantFullControl" />

	<parameter name="xAmzMeta" description="Name of the xAmzMeta" />
	<parameter name="xAmzServeEncryption" description="Name of the xAmzServeEncryption" />
	<parameter name="xAmzStorageClass" description="Name of the xAmzStorageClass" />
	<parameter name="xAmzWebsiteLocation" description="Name of the xAmzWebsiteLocation" />
	<parameter name="xAmzMfa" description="Name of the expect" />

modification

	<!-- parameters that are required for createObjectCopy -->
	<parameter name="xAmzCopySource"
		description="The name of the source bucket and key name of the source object, separated by a slash" />
	<parameter name="xAmzMetadataDirective"
		description="Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request." />
	<parameter name="xAmzCopySourceIfMatch"
		description="Copies the object if its entity tag (ETag) matches the specified tag" />
	<parameter name="xAmzCopySourceIfNoneMatch"
		description="Copies the object if its entity tag (ETag) is different than the specified ETag" />
	<parameter name="xAmzCopySourceIfUnmodifiedSince"
		description="Copies the object if it hasn't been modified since the specified time" />
	<parameter name="xAmzCopySourceIfModifiedSince"
		description="Copies the object if it has been modified since the specified time" />
	<parameter name="xAmzServerSideEncryption"
		description="Specifies the server-side encryption algorithm to use when Amazon S3 creates the target object." />

	<sequence>
		<property name="uri.var.accessKeyId" expression="$func:accessKeyId" />
		<property name="uri.var.secretAccessKey" expression="$func:secretAccessKey" />
		<property name="uri.var.methodType" expression="$func:methodType" />
		<property name="uri.var.contentLength" expression="$func:contentLength" />
		<property name="uri.var.contentType" expression="$func:contentType" />
		<property name="uri.var.contentMD5" expression="$func:contentMD5" />
		<property name="uri.var.expect" expression="$func:expect" />
		<property name="uri.var.host" expression="$func:host" />
		<property name="uri.var.xAmzDate" expression="$func:xAmzDate" />
		<property name="uri.var.xAmzSecurityToken" expression="$func:xAmzSecurityToken" />
		<property name="uri.var.bucketName" expression="$func:bucketName" />
		<property name="uri.var.uriRemainder" expression="$func:uriRemainder" />

		<property name="uri.var.xAmzAcl" expression="$func:xAmzAcl" />
		<property name="uri.var.xAmzGrantRead" expression="$func:xAmzGrantRead" />
		<property name="uri.var.xAmzGrantWrite" expression="$func:xAmzGrantWrite" />
		<property name="uri.var.xAmzGrantReadAcp" expression="$func:xAmzGrantReadAcp" />
		<property name="uri.var.xAmzGrantWriteAcp" expression="$func:xAmzGrantWriteAcp" />
		<property name="uri.var.xAmzGrantFullControl" expression="$func:xAmzGrantFullControl" />

		<property name="uri.var.xAmzMeta" expression="$func:xAmzMeta" />
		<property name="uri.var.xAmzServeEncryption" expression="$func:xAmzServeEncryption" />
		<property name="uri.var.xAmzStorageClass" expression="$func:xAmzStorageClass" />
		<property name="uri.var.xAmzWebsiteLocation" expression="$func:xAmzWebsiteLocation" />
		<property name="uri.var.xAmzMfa" expression="$func:xAmzMfa" />

		<property name="uri.var.xAmzCopySource" expression="$func:xAmzCopySource" />
		<property name="uri.var.xAmzMetadataDirective" expression="$func:xAmzMetadataDirective" />
		<property name="uri.var.xAmzCopySourceIfMatch" expression="$func:xAmzCopySourceIfMatch" />
		<property name="uri.var.xAmzCopySourceIfNoneMatch"
			expression="$func:xAmzCopySourceIfNoneMatch" />
		<property name="uri.var.xAmzCopySourceIfUnmodifiedSince"
			expression="$func:xAmzCopySourceIfUnmodifiedSince" />
		<property name="uri.var.xAmzCopySourceIfModifiedSince"
			expression="$func:xAmzCopySourceIfModifiedSince" />

		<class name="org.wso2.carbon.connector.amazons3.auth.AuthenticationHelper" />

		<!-- InitAclHeaders Setup -->
		<filter
			xpath="(not(get-property('xAmzAclValue') = '' or (not(string(get-property('xAmzAclValue'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="x-amz-acl" expression="get-property('xAmzAcl')" scope="transport"
					type="STRING" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('xAmzGrantReadValue') = '' or (not(string(get-property('xAmzGrantReadValue'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="x-amz-grant-read" expression="get-property('xAmzGrantReadValue')"
					scope="transport" type="STRING" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('xAmzGrantWriteValue') = '' or (not(string(get-property('xAmzGrantWriteValue'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="x-amz-grant-write" expression="get-property('xAmzGrantWriteValue')"
					scope="transport" type="STRING" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('xAmzGrantReadAcpValue') = '' or (not(string(get-property('xAmzGrantReadAcpValue'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="x-amz-grant-read-acp" expression="get-property('xAmzGrantReadAcpValue')"
					scope="transport" type="STRING" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('xAmzGrantWriteAcpValue') = '' or (not(string(get-property('xAmzGrantWriteAcpValue'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="x-amz-grant-write-acp" expression="get-property('xAmzGrantWriteAcpValue')"
					scope="transport" type="STRING" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('xAmzGrantFullControlValue') = '' or (not(string(get-property('xAmzGrantFullControlValue'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="x-amz-grant-full-control" expression="get-property('xAmzGrantFullControlValue')"
					scope="transport" type="STRING" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('date') = '' or  (not(string(get-property('date'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="Date" expression="get-property('date')" scope="transport"
					type="STRING" />

			</then>
		</filter>

		<!-- InitCommonHeaders Setup -->
		<filter
			xpath="(not(get-property('authenticationCode') = '' or  (not(string(get-property('authenticationCode'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="Authorization" expression="get-property('authenticationCode')"
					scope="transport" type="STRING" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('uri.var.contentLength') = '' or (not(string(get-property('uri.var.contentLength'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="Content-Length" expression="get-property('uri.var.contentLength')"
					scope="transport" type="STRING" />

			</then>
		</filter>

		<filter
			xpath="(not(get-property('contentTypeValue') = '' or (not(string(get-property('contentTypeValue'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="Content-Type" expression="get-property('contentTypeValue')"
					scope="transport" type="STRING" />

			</then>
		</filter>

		<filter
			xpath="(not(get-property('contentMD5Value') = '' or  (not(string(get-property('contentMD5Value'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="Content-MD5" expression="get-property('contentMD5Value')"
					scope="transport" type="STRING" />

			</then>
		</filter>

		<filter
			xpath="(not(get-property('uri.var.expect') = '' or (not(string(get-property('uri.var.expect'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="Expect" expression="get-property('expect')" scope="transport"
					type="STRING" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('uri.var.host') = '' or (not(string(get-property('uri.var.host'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="Host" expression="get-property('host')" scope="transport"
					type="STRING" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('xAmzDateValue') = '' or  (not(string(get-property('xAmzDateValue'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="x-amz-date" expression="get-property('xAmzDateValue')" scope="transport"
					type="STRING" />

			</then>
		</filter>

		<filter
			xpath="(not(get-property('xAmzSecurityToken') = '' or  (not(string(get-property('xAmzSecurityToken'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="x-amz-security-token" expression="get-property('xAmzSecurityToken')"
					scope="transport" type="STRING" />

			</then>
		</filter>

		<!-- InitPutObjectHeaders Setup -->
		<filter
			xpath="(not(get-property('uri.var.cacheControl') = '' or (not(string(get-property('uri.var.cacheControl'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="Cache-Control" expression="get-property('cacheControl')"
					scope="transport" type="STRING" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('uri.var.contentDisposition') = '' or (not(string(get-property('uri.var.contentDisposition'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="Content-Disposition" expression="get-property('contentDisposition')"
					scope="transport" type="STRING" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('uri.var.contentEncoding') = '' or (not(string(get-property('uri.var.contentEncoding'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="Content-Encoding" expression="get-property('contentEncoding')"
					scope="transport" type="STRING" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('uri.var.expires') = '' or (not(string(get-property('uri.var.expires'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="Expires" expression="get-property('expires')" scope="transport"
					type="STRING" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('xAmzMetaValue') = '' or (not(string(get-property('xAmzMetaValue'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="x-amz-meta-" expression="get-property('xAmzMetaValue')"
					scope="transport" type="STRING" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('xAmzServeEncryptionValue') = '' or (not(string(get-property('xAmzServeEncryptionValue'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="x-amz-server-side-encryption" expression="get-property('xAmzServeEncryptionValue')"
					scope="transport" type="STRING" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('xAmzStorageClassValue') = '' or (not(string(get-property('xAmzStorageClassValue'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="x-amz-storage-class" expression="get-property('xAmzStorageClassValue')"
					scope="transport" type="STRING" />
			</then>
		</filter>

		<filter
			xpath="(not(get-property('xAmzWebsiteLocationValue') = '' or (not(string(get-property('xAmzWebsiteLocationValue'))))))">
			<then>
				<property xmlns:ns2="http://org.apache.synapse/xsd"
					xmlns:ns="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"
					name="x-amz-website-redirect-location" expression="get-property('xAmzWebsiteLocationValue')"
					scope="transport" type="STRING" />
			</then>
		</filter>

	</sequence>
</template>
